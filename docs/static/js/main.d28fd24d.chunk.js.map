{"version":3,"sources":["contextGif/GifContext.js","components/AddCategory.js","helpers/getGifs.js","components/ButtonLike.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/NavBar.js","GifExpertApp.js","GifFavorite.js","router/AppRouter.js","MainApp.js","index.js"],"names":["GifContext","createContext","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","onChange","target","value","type","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","imgs","map","gif","title","id","images","downsized_medium","ButtonLike","idRecived","useContext","gifFavorite","setGifFavorite","isBtnActiveFav","setBtnActive","useEffect","className","onClick","localStorage","setItem","JSON","stringify","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","GifGridItem","src","alt","GifGrid","loading","state","setState","then","gifs","useFetchGifts","NavBar","activeClassName","exact","to","GifExperApp","categories","GifFavorite","AppRouter","basename","process","path","component","MainApp","myGifs","getItem","parse","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d28fd24d.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const GifContext = createContext([]);","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = ( e ) => {\r\n            setInputValue( e.target.value )       \r\n    }\r\n    const handleSubmit = ( e ) => {\r\n        setCategories( [inputValue])\r\n       \r\n        e.preventDefault()\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit } >\r\n            <input onChange={ handleChange } value={ inputValue } type='text' placeholder='Buscar Gif'/>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=YrxRD0sRf7PV44sT1Yd2IKPIhD1UhxD8`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const imgs = data.map( gif => {\r\n        return {\r\n            title: gif.title,\r\n            id: gif.id,\r\n            url: gif.images.downsized_medium.url,\r\n        }\r\n    });\r\n    return imgs;\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport { GifContext } from '../contextGif/GifContext';\r\n\r\nexport const ButtonLike = ( { url, title, id: idRecived } ) => {\r\n    const { gifFavorite, setGifFavorite } = useContext( GifContext );\r\n    \r\n    const [ isBtnActiveFav, setBtnActive ] = useState( true );\r\n\r\n    useEffect( () => {\r\n        setBtnActive( !isBtnActiveFav );\r\n    }, [ gifFavorite ] );\r\n\r\n    const handleLike = () => {\r\n        localStorage.setItem('myGifs',JSON.stringify([...gifFavorite, ...[ {id:idRecived, url, title } ]]));\r\n        setGifFavorite([...gifFavorite, ...[ {id:idRecived, url, title } ]])\r\n        setBtnActive(true);\r\n       \r\n    }\r\n    return (\r\n        <button className={ isBtnActiveFav ? 'isBtnActive' : '' } onClick={ handleLike }>\r\n            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\r\n            </svg>\r\n        </button >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropType from 'prop-types';\r\nimport { ButtonLike } from './ButtonLike';\r\nexport const GifGridItem = ({title,url, id}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n            <ButtonLike url={url} title={title} id={id}/>\r\n        </div>\r\n    )\r\n}\r\nGifGridItem.propTypes = {\r\n    title: PropType.string.isRequired,\r\n    url: PropType.string.isRequired,\r\n};\r\n","import React from 'react'\r\nimport { useFetchGifts } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport PropType from 'prop-types';\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data, loading } = useFetchGifts( category );\r\n    \r\n    return (\r\n    <>\r\n    <h5>{ category }</h5>\r\n    { loading && <p>Cargando...</p> }\r\n     <div className=\"card-grid\">\r\n        { data.map( ( gif ) => {\r\n            return <GifGridItem key={ gif.id } {...gif}/>//Se envia la props con el objeto \r\n        })\r\n        }\r\n    </div> \r\n    </>\r\n    );\r\n}\r\nGifGrid.propTypes = {\r\n    category: PropType.string.isRequired,\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifts = ( category ) => {\r\n    const [ state, setState ] = useState( {data: [], loading:true} )\r\n\r\n    useEffect( () => {\r\n        getGifs( category ).then( gifs => {\r\n                setState({\r\n                    data: gifs,\r\n                    loading: false,\r\n                })\r\n        })\r\n    },[ category ])\r\n\r\n    return state;\r\n}","import React from 'react';\r\nimport { NavLink} from 'react-router-dom';\r\n\r\n\r\nexport const NavBar = () => {\r\n\r\n    return (\r\n        <nav >\r\n            <ul>\r\n\r\n                <li>\r\n                <NavLink\r\n                        activeClassName=\"isActive\"\r\n                        exact\r\n                        to=\"/\"\r\n                    >\r\n                        <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                        </svg>\r\n                            Buscar gif\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                <NavLink\r\n                        activeClassName=\"isActive\"\r\n                        exact\r\n                        to=\"/Favorites\"\r\n                    >\r\n                        Favoritos\r\n                    </NavLink>\r\n\r\n                </li>\r\n                    \r\n\r\n                    \r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid'\r\nimport { NavBar } from './components/NavBar';\r\n\r\n\r\nconst GifExperApp = () => {\r\n    const [ categories, setCategories ] = useState(['Big Data']);\r\n\r\n    return (\r\n        < >\r\n            <NavBar />\r\n            <div className=\"wrapperApp\">\r\n            <h2>Encuentra cualquier gif de tu preferencia</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map( (category) => {\r\n                        return <GifGrid key={ category } category={category}/>\r\n                    })\r\n                }\r\n            </ol>\r\n\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n};\r\nexport default GifExperApp;","import React, { useContext, useState } from 'react'\r\nimport { GifGridItem } from './components/GifGridItem';\r\nimport { NavBar } from './components/NavBar'\r\nimport { GifContext } from './contextGif/GifContext';\r\n\r\nexport const GifFavorite = ( ) => {\r\n    const { gifFavorite } = useContext( GifContext );\r\n\r\n    return (\r\n        <>\r\n        <NavBar />\r\n        <div className=\"wrapperApp\">\r\n            <h1>Mis gifs favoritos</h1>\r\n            <div className=\"card-grid\">\r\n                { gifFavorite.map( ( gif ) => {\r\n                    return <GifGridItem key={ gif.id } {...gif}/>\r\n                })\r\n                }\r\n            </div> \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Switch, BrowserRouter, Route } from 'react-router-dom';\r\nimport GifExperApp from '../GifExpertApp';\r\nimport { GifFavorite } from '../GifFavorite';\r\n\r\n\r\n\r\nexport const AppRouter = () => {\r\n    \r\n\r\n    return (\r\n             <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n               \r\n                    <Switch>\r\n                    <Route exact path=\"/favorites\" component={ GifFavorite } />\r\n                    <Route exact path=\"/\" component={ GifExperApp } />\r\n                    <Redirect to=\"/\" />\r\n                    </Switch>\r\n\r\n            </BrowserRouter> \r\n    );\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { GifContext } from './contextGif/GifContext'\r\nimport { AppRouter } from './router/AppRouter'\r\n\r\nexport const MainApp = () => {\r\n   \r\n    const [gifFavorite, setGifFavorite] = useState([]);\r\n    useEffect(() => {\r\n        const myGifs = localStorage.getItem('myGifs') ? JSON.parse(localStorage.getItem('myGifs')) : [];\r\n        localStorage.setItem('myGifs',JSON.stringify(myGifs))\r\n        setGifFavorite(myGifs)\r\n    }, [])\r\n    return (\r\n        <GifContext.Provider value= { { gifFavorite, setGifFavorite } }>\r\n            <AppRouter />\r\n        </GifContext.Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MainApp } from './MainApp';\n\nReactDOM.render(\n    <MainApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}