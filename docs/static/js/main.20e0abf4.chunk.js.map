{"version":3,"sources":["contextGif/GifContext.js","contextGif/gifReducer.js","components/AddCategory.js","helpers/getGifs.js","components/ButtonLike.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/NavBar.js","GifExpertApp.js","GifFavorite.js","router/AppRouter.js","MainApp.js","index.js"],"names":["GifContext","createContext","initialState","gifReducer","state","action","type","alert","payload","filter","gif","id","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","onChange","target","value","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","imgs","map","title","images","downsized_medium","ButtonLike","idRecived","useContext","gifFavorites","dispatch","isBtnActiveFav","setBtnActive","useEffect","length","isFavorite","some","className","onClick","isAdded","addGif","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","GifGridItem","src","alt","GifGrid","loading","setState","then","gifs","useFetchGifts","NavBar","activeClassName","exact","to","GifExperApp","categories","GifFavorite","console","log","AppRouter","basename","process","path","component","MainApp","useReducer","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20e0abf4.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const GifContext = createContext([]);","export const initialState = [];\r\n\r\nexport const addGif = ( id, title,url ) => ({\r\n    type: 'ADD',\r\n    payload: [{ \r\n        id, \r\n        title, \r\n        url\r\n    }]\r\n\r\n})\r\nexport const removeGif = ( id ) => ({\r\n    type: 'REMOVE',\r\n    payload: id\r\n})\r\nexport const gifReducer = (state = [], action ) => {\r\n\r\n    switch ( action.type ) {\r\n        case 'ADD':\r\n            alert('Se ha agregado el gif a tus favoritos')\r\n            return [\r\n                ...state,\r\n                ...action.payload\r\n            ]\r\n\r\n        case 'REMOVE':\r\n            alert('Se ha eliminado el gif de tus favoritos')\r\n            return state.filter( gif => gif.id !== action.payload )\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = ( e ) => {\r\n            setInputValue( e.target.value )       \r\n    }\r\n    const handleSubmit = ( e ) => {\r\n        setCategories( [inputValue])\r\n       \r\n        e.preventDefault()\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit } >\r\n            <input onChange={ handleChange } value={ inputValue } type='text' placeholder='Buscar Gif'/>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=YrxRD0sRf7PV44sT1Yd2IKPIhD1UhxD8`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const imgs = data.map( gif => {\r\n        return {\r\n            title: gif.title,\r\n            id: gif.id,\r\n            url: gif.images.downsized_medium.url,\r\n        }\r\n    });\r\n    return imgs;\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport { GifContext } from '../contextGif/GifContext';\r\nimport { addGif, removeGif } from '../contextGif/gifReducer';\r\n\r\nexport const ButtonLike = ( { url, title, id: idRecived } ) => {\r\n    const [ gifFavorites, dispatch ] = useContext( GifContext );\r\n    \r\n    const [ isBtnActiveFav, setBtnActive ] = useState( false );\r\n\r\n    useEffect( () => {\r\n        if ( gifFavorites.length > 0 ) {\r\n            const isFavorite = gifFavorites.some( gif => gif.id === idRecived );\r\n            setBtnActive( isFavorite );\r\n        }\r\n    }, [ gifFavorites ] );\r\n\r\n    const handleLike = () => {\r\n        const isAdded = gifFavorites.some( gif => gif.id === idRecived );\r\n        ( isAdded ) \r\n            ? dispatch(removeGif( idRecived ))\r\n            : dispatch( addGif(idRecived, title, url ) );\r\n        setBtnActive( !isBtnActiveFav );\r\n       \r\n    }\r\n    return (\r\n        <button className={ isBtnActiveFav ? 'isBtnActive' : '' } onClick={ handleLike }>\r\n            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\r\n            </svg>\r\n        </button >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropType from 'prop-types';\r\nimport { ButtonLike } from './ButtonLike';\r\nexport const GifGridItem = ({title,url, id}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n            <ButtonLike url={url} title={title} id={id}/>\r\n        </div>\r\n    )\r\n}\r\nGifGridItem.propTypes = {\r\n    title: PropType.string.isRequired,\r\n    url: PropType.string.isRequired,\r\n};\r\n","import React from 'react'\r\nimport { useFetchGifts } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport PropType from 'prop-types';\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data, loading } = useFetchGifts( category );\r\n    \r\n    return (\r\n    <>\r\n    <h5>{ category }</h5>\r\n    { loading && <p>Cargando...</p> }\r\n     <div className=\"card-grid\">\r\n        { data.map( ( gif ) => {\r\n            return <GifGridItem key={ gif.id } {...gif}/>//Se envia la props con el objeto \r\n        })\r\n        }\r\n    </div> \r\n    </>\r\n    );\r\n}\r\nGifGrid.propTypes = {\r\n    category: PropType.string.isRequired,\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifts = ( category ) => {\r\n    const [ state, setState ] = useState( {data: [], loading:true} )\r\n\r\n    useEffect( () => {\r\n        getGifs( category ).then( gifs => {\r\n                setState({\r\n                    data: gifs,\r\n                    loading: false,\r\n                })\r\n        })\r\n    },[ category ])\r\n\r\n    return state;\r\n}","import React from 'react';\r\nimport { NavLink} from 'react-router-dom';\r\n\r\n\r\nexport const NavBar = () => {\r\n\r\n    return (\r\n        <nav >\r\n            <ul>\r\n\r\n                <li>\r\n                <NavLink\r\n                        activeClassName=\"isActive\"\r\n                        exact\r\n                        to=\"/\"\r\n                    >\r\n                        <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                        </svg>\r\n                            Buscar gif\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                <NavLink\r\n                        activeClassName=\"isActive\"\r\n                        exact\r\n                        to=\"/Favorites\"\r\n                    >\r\n                        Favoritos\r\n                    </NavLink>\r\n\r\n                </li>\r\n                    \r\n\r\n                    \r\n            </ul>\r\n        </nav>\r\n    )\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid'\r\nimport { NavBar } from './components/NavBar';\r\n\r\n\r\nconst GifExperApp = () => {\r\n    const [ categories, setCategories ] = useState(['Big Data']);\r\n\r\n    return (\r\n        < >\r\n            <NavBar />\r\n            <div className=\"wrapperApp\">\r\n            <h2>Encuentra cualquier gif de tu preferencia</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map( (category) => {\r\n                        return <GifGrid key={ category } category={category}/>\r\n                    })\r\n                }\r\n            </ol>\r\n\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n};\r\nexport default GifExperApp;","import React, { useContext } from 'react'\r\nimport { GifGridItem } from './components/GifGridItem';\r\nimport { NavBar } from './components/NavBar'\r\nimport { GifContext } from './contextGif/GifContext';\r\n\r\nexport const GifFavorite = ( ) => {\r\n    const  [ gifFavorites ] = useContext( GifContext );\r\n    console.log( gifFavorites)\r\n\r\n    return (\r\n        <>\r\n        <NavBar />\r\n        <div className=\"wrapperApp\">\r\n            <h1>Mis gifs favoritos</h1>\r\n            <div className=\"card-grid\">\r\n                { gifFavorites.map( ( gif ) => {\r\n                    return <GifGridItem key={ gif.id } {...gif}/>\r\n                })\r\n                }\r\n            </div> \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Switch, BrowserRouter, Route } from 'react-router-dom';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport GifExperApp from '../GifExpertApp';\r\nimport { GifFavorite } from '../GifFavorite';\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n    return (\r\n             <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n               \r\n                    <Switch>\r\n                    <Route exact path=\"/favorites\" component={ GifFavorite } />\r\n                    <Route exact path=\"/\" component={ GifExperApp } />\r\n                    <Redirect to=\"/\" />\r\n                    </Switch>\r\n\r\n            </BrowserRouter> \r\n    );\r\n}","import React, { useEffect, useReducer } from 'react'\r\nimport { GifContext } from './contextGif/GifContext'\r\nimport { gifReducer, initialState } from './contextGif/gifReducer';\r\nimport { AppRouter } from './router/AppRouter'\r\n\r\nexport const MainApp = () => {\r\n   \r\n    const [ gifFavorites, dispatch ] = useReducer( gifReducer,   initialState );\r\n    return (\r\n        <GifContext.Provider value= { [ gifFavorites, dispatch ] }>\r\n            <AppRouter />\r\n        </GifContext.Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MainApp } from './MainApp';\n\nReactDOM.render(\n    <MainApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}